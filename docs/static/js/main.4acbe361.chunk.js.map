{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","divroot","document","getElementById","ReactDOM","render"],"mappings":"2MAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,eADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACI,mCACA,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBgB,SAACP,GAErBF,EAAcE,EAAEQ,OAAOF,e,+BCNlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEXG,EAFW,gBAGEA,EAAUC,OAHZ,uBAGVC,EAHU,EAGVA,KACDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARzB,kBAWVM,GAXU,4CAAD,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGlB,CAACpB,IACIqB,EDVqBK,CAAa1B,GAA7Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,qCACA,oBAAIJ,UAAU,yCAAd,SAAwDhB,IACvDoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAKYH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEf/BgB,EAAa,WAAK,IAAD,EAEUzC,mBAAS,CAAC,UAFpB,mBAEnB0C,EAFmB,KAEP3C,EAFO,KAO3B,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,aADyB,CACxB,EAAD,CAEEA,SAAUA,GADLA,YCfpB6B,EAAQC,SAASC,eAAe,QACtCC,IAASC,OAAO,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.4acbe361.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport propTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('hola munndo');\r\n    const HandleInputChange=(e)=>{\r\n        \r\n        setInputValue(e.target.value);//validar cuando la persona ecribe algo \r\n    }\r\n    const HandleSubmit=(e)=>{//mandar la info a traves del enter\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats=>[inputValue,...cats]);//necesito la vvariable cats por que no tengo acceso al arreglo\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <>\r\n        <form onSubmit={HandleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}//pasa por valor lo que le escribimos al cuadro de texto\r\n            onChange={HandleInputChange}\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories:propTypes.func.isRequired//manda como argumento la funcion de setCategories\r\n}\r\n","export const getGifs=async(category)=>{//regresa una promesa que devuelve la coleccion de mis imagenes\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Y2EvdJI3AJG4k8imppoUnhEtY1NkXGyK`;\r\n    const respuesta=await fetch(url);\r\n    const {data}=await respuesta.json();//informacion en formato json que recibirá\r\n    const gifs=data.map(img=>{//mutar el arreglo para extraer mediante un map la informacion que yo necesito de esa peticion http\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    //console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//useEffect me va a permitir ejecutar cierto codigo de manera condicional\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading}=useFetchGifs(category);//realizar peticion automatica cuando el componente se cargue una vez o cuando cambie la categoria\r\n    \r\n    return (\r\n        <>\r\n        <h3 className=\"card animate__animated animate__bounce\">{category}</h3>\r\n        {loading && <p>loading</p> }\r\n       \r\n        <div className=\"card-grid\">\r\n\r\n                {/*para mostrar una propiedad en html hay que traer la variable del useState,\r\n                y tenemos que hacer un map para mediante un element html traer las propiedades \r\n                mediante la variable usestate y el key con la variable*/\r\n                    images.map(img=>(\r\n                       <GifGridItem key={img.id} {...img}/>//estoy mandando cada una de las pripiedades de las imagenes como una propiedad independiente\r\n                    ))\r\n                }\r\n            \r\n        </div> \r\n        </>\r\n    );\r\n}\r\n","import { useState,useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    useEffect( () => {\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n        })\r\n    },[category])\r\n    return state;//retorno el objeto\r\n    \r\n}\r\n//CUSTOM HOOK\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n export const GifExpertApp=()=>{\r\n     \r\n     const [categories, setCategories] = useState(['pedro']);\r\n    /* const handleAdd=()=>{\r\n         setCategories([...categories,'hunter']);//mantengo las categorias anteriores y añado una nueva\r\n     }*/\r\n\r\n    return(\r\n        <>\r\n        <h1>GifExpertApp</h1>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr></hr>\r\n        <ul>\r\n            {\r\n                categories.map(category => (//El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos. \r\n                   <GifGrid\r\n                     key={category} \r\n                     category={category}\r\n                      />\r\n                ))\r\n            }\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\nconst divroot=document.getElementById(\"root\");\nReactDOM.render(<GifExpertApp />,divroot);\n\n\n\n\n"],"sourceRoot":""}